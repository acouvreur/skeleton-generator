package ${project.model.mvcAspectPackageName};

import java.lang.reflect.Method;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;

import ${project.model.businessExceptionPackageName}.BusinessException;
import ${project.model.controllerPackageName}.BaseController;

@Component
@Aspect
public class AjaxMethodAspect extends BaseController {
	
	@Pointcut("@annotation(${project.model.mvcAspectPackageName}.AjaxMethod)")
	private void ajaxMethods(){}
	
	
	@Around("ajaxMethods()")
	public void execute(ProceedingJoinPoint joinPoint) throws Throwable {
		Method proxiedMethod = ((MethodSignature) joinPoint.getSignature()).getMethod();
		AjaxMethod ajaxMethod = proxiedMethod.getAnnotation(AjaxMethod.class);
		String identifier = ajaxMethod.identifier();
		
		try {
			logger.info(identifier);
			joinPoint.proceed();
			displayInfo(identifier + ".success");
			logger.info("completed");
		} catch (BusinessException e) {
			displayError(e.getMessage());
			logger.error("failed : " + e.getClass().getSimpleName() + " - " + e.getMessage());
		} catch (Exception e) {
			displayError(identifier + ".failure");
			logger.error("failed : " + e.getClass().getSimpleName() + " - " + e.getMessage());
		}
	}
}
