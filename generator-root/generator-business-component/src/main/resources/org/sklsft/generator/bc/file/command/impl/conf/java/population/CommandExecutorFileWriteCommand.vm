package ${project.model.commandPackageName};

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import ${project.model.populationExceptionPackageName}.BuildFailureException;
import ${project.model.populationExceptionPackageName}.CommandFailureException;

@Component
public class CommandExecutor {

	private static final Charset encoding = StandardCharsets.UTF_8;

	@Autowired
	private CommandFactory commandFactory;


	/**
	 * executes all the commands contained in the specified file.
	 * 
	 * @param commandFilePath
	 * @throws BuildFailureException
	 * @throws CommandFailureException
	 * @throws IOException
	 */
	public void execute(String commandFilePath, Class<?> clazz)
			throws BuildFailureException, CommandFailureException, IOException {

		URI uri = null;
		try {
			uri = this.getClass().getResource(commandFilePath).toURI();
		} catch (URISyntaxException e) {
			throw new BuildFailureException(e.getMessage(),e);
		}
		Path path = Paths.get(uri);
		List<String> lines = Files.readAllLines(path, encoding);

		for (String line : lines) {
			if (!StringUtils.isEmpty(line)) {
				Command command = commandFactory
						.createCommand(clazz, line);
				command.execute();
			}
		}
	}
}