package ${project.model.controllerPackageName};

import java.util.Iterator;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import javax.faces.application.FacesMessage;
import javax.faces.component.EditableValueHolder;
import javax.faces.component.UIComponent;
import javax.faces.component.UIForm;
import javax.faces.context.FacesContext;
import javax.faces.event.AbortProcessingException;
import javax.faces.event.ActionEvent;

import ${project.model.businessExceptionPackageName}.BusinessException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

public abstract class BaseController {
	
	protected static final Logger logger = LoggerFactory
			.getLogger(BaseController.class);
	
	private ResourceBundle globalMessages;
	
	public BaseController() {
		globalMessages = ResourceBundle.getBundle("GlobalMessages");
	}
		
	/*
	 * properties
	 */
	@Value("10")
	protected int numberOfRows;
	
	
	/*
	 * getters and setters
	 */
	public int getNumberOfRows() {
		return numberOfRows;
	}
	public void setNumberOfRows(int numberOfRows) {
		this.numberOfRows = numberOfRows;
	}

	
	public static String getParameter(String parameterName) {

		String parameter = FacesContext.getCurrentInstance()
				.getExternalContext().getRequestParameterMap()
				.get(parameterName);
		return parameter;
	}
	
	
	private String getTranslatedMessage(String message) {
		
		if (message == null) {
			message = BusinessException.ERROR_UNKNOWN;
		}
		
		String translatedMessage = "?" + message + "?";
		
		try {
			translatedMessage = globalMessages.getString(message);
		} catch (MissingResourceException e) {
			logger.warn("No message found for " + message);
		}
		
		return translatedMessage;
	}
	
	
	protected void displayInfo(String message) {

		String translatedMessage = getTranslatedMessage(message);
		
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_INFO, translatedMessage , null));
	}
	

	protected void displayWarning(String message) {
		
		String translatedMessage = getTranslatedMessage(message);
		
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_WARN, translatedMessage , null));
	}
	

	protected void displayError(String message) {

		String translatedMessage = getTranslatedMessage(message);
		
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_ERROR, translatedMessage , null));
	}
	
	
	public void resetForm(ActionEvent event)
			throws AbortProcessingException {

		UIComponent component = event.getComponent();
		UIForm form = findParentForm(component);

		clearComponentHierarchy(form);

	}
	

	private UIForm findParentForm(UIComponent component) {
		for (UIComponent parent = component; parent != null; parent = parent
				.getParent()) {
			if (parent instanceof UIForm) {
				return (UIForm) parent;
			}
		}
		return null;
	}
	

	private void clearComponentHierarchy(UIComponent pComponent) {

		if (pComponent instanceof EditableValueHolder) {
			EditableValueHolder editableValueHolder = (EditableValueHolder) pComponent;
			editableValueHolder.resetValue();
		}
		for (Iterator<UIComponent> iterator = pComponent.getFacetsAndChildren(); iterator
				.hasNext();) {
			clearComponentHierarchy(iterator.next());
		}

	}
}